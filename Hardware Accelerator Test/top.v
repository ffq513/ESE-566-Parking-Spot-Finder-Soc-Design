// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7z045rf900-2i,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.500000,HLS_SYN_LAT=7305,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=20,HLS_SYN_FF=802,HLS_SYN_LUT=1587}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        accel_x,
        accel_y,
        yaw,
        start_point,
        end_point,
        next_dirc,
        next_dirc_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv64_147AE147B = 64'b101000111101011100001010001111011;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv58_28F5C290 = 58'b101000111101011100001010010000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv58_0 = 58'b0000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv65_147AE147B = 65'b101000111101011100001010001111011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv65_0 = 65'b00000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] accel_x;
input  [31:0] accel_y;
input  [31:0] yaw;
input  [31:0] start_point;
input  [31:0] end_point;
output  [31:0] next_dirc;
output   next_dirc_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] first_velocity = 32'b00000000000000000000000000000000;
reg   [31:0] total_distance = 32'b00000000000000000000000000000000;
wire   [0:0] tmp_1_fu_141_p3;
reg   [0:0] tmp_1_reg_458;
wire   [24:0] tmp_2_fu_159_p4;
reg   [24:0] tmp_2_reg_463;
wire   [24:0] tmp_4_fu_169_p3;
reg   [24:0] tmp_4_reg_468;
wire  signed [57:0] mul1_i_fu_218_p2;
reg  signed [57:0] mul1_i_reg_473;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_53;
reg   [0:0] tmp_5_reg_478;
reg   [21:0] tmp_7_reg_484;
wire   [31:0] tmp_3_i_fu_348_p3;
reg   [31:0] tmp_3_i_reg_489;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_66;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_75;
wire  signed [64:0] mul_i_fu_376_p2;
reg  signed [64:0] mul_i_reg_505;
reg   [0:0] tmp_13_reg_510;
reg   [25:0] tmp_15_reg_516;
wire    grp_top_calculateDir_fu_107_ap_start;
wire    grp_top_calculateDir_fu_107_ap_done;
wire    grp_top_calculateDir_fu_107_ap_idle;
wire    grp_top_calculateDir_fu_107_ap_ready;
wire   [31:0] grp_top_calculateDir_fu_107_start_point;
wire   [31:0] grp_top_calculateDir_fu_107_end_point;
wire   [31:0] grp_top_calculateDir_fu_107_next_dirc;
wire    grp_top_calculateDir_fu_107_next_dirc_ap_vld;
reg    grp_top_calculateDir_fu_107_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_102;
wire  signed [31:0] velocity_fu_288_p2;
wire  signed [31:0] tmp_5_i_fu_446_p2;
wire  signed [31:0] mul3_i_fu_129_p0;
wire  signed [63:0] mul3_i_fu_129_p2;
wire  signed [63:0] neg_mul4_i_cast_fu_135_p2;
wire   [24:0] tmp_fu_149_p4;
wire   [25:0] tmp_4_cast_fu_180_p1;
wire   [25:0] neg_ti9_i_fu_183_p2;
wire   [25:0] tmp_3_fu_177_p1;
wire   [25:0] accel_fu_189_p3;
wire   [27:0] p_shl1_i_fu_200_p3;
wire  signed [27:0] accel_cast_fu_196_p1;
wire  signed [27:0] tmp_i_fu_208_p2;
wire  signed [27:0] mul1_i_fu_218_p0;
wire  signed [57:0] neg_mul1_i_fu_246_p2;
wire   [21:0] tmp_6_fu_251_p4;
wire   [21:0] tmp_10_fu_261_p3;
wire  signed [22:0] trunc1_i_cast_fu_267_p1;
wire  signed [22:0] neg_ti1_i_fu_271_p2;
wire   [22:0] tmp_6_i_fu_277_p3;
wire  signed [31:0] tmp_1_i_fu_284_p1;
wire  signed [31:0] tmp_2_i_fu_294_p2;
wire  signed [31:0] p_neg_i_fu_308_p2;
wire   [30:0] p_lshr_i_fu_314_p4;
wire   [31:0] tmp_8_fu_324_p1;
wire   [30:0] p_lshr_f_i_fu_334_p4;
wire   [0:0] tmp_11_fu_300_p3;
wire   [31:0] p_neg_t_i_fu_328_p2;
wire   [31:0] tmp_9_fu_344_p1;
wire   [31:0] tmp_12_fu_362_p2;
wire   [31:0] tmp_4_i_fu_367_p2;
wire  signed [31:0] mul_i_fu_376_p0;
wire  signed [64:0] neg_mul_i_fu_400_p2;
wire   [25:0] tmp_14_fu_405_p4;
wire   [25:0] tmp_16_fu_415_p3;
wire  signed [26:0] trunc_i_cast_fu_421_p1;
wire  signed [26:0] neg_ti_i_fu_425_p2;
wire   [26:0] distance_fu_431_p3;
wire  signed [31:0] distance_cast_fu_438_p1;
reg   [4:0] ap_NS_fsm;


top_calculateDir grp_top_calculateDir_fu_107(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_top_calculateDir_fu_107_ap_start ),
    .ap_done( grp_top_calculateDir_fu_107_ap_done ),
    .ap_idle( grp_top_calculateDir_fu_107_ap_idle ),
    .ap_ready( grp_top_calculateDir_fu_107_ap_ready ),
    .start_point( grp_top_calculateDir_fu_107_start_point ),
    .end_point( grp_top_calculateDir_fu_107_end_point ),
    .next_dirc( grp_top_calculateDir_fu_107_next_dirc ),
    .next_dirc_ap_vld( grp_top_calculateDir_fu_107_next_dirc_ap_vld )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_top_calculateDir_fu_107_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_top_calculateDir_fu_107_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_top_calculateDir_fu_107_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
            grp_top_calculateDir_fu_107_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_top_calculateDir_fu_107_ap_ready)) begin
            grp_top_calculateDir_fu_107_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        first_velocity <= velocity_fu_288_p2;
        tmp_3_i_reg_489 <= tmp_3_i_fu_348_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        mul1_i_reg_473[4] <= mul1_i_fu_218_p2[4];
mul1_i_reg_473[5] <= mul1_i_fu_218_p2[5];
mul1_i_reg_473[6] <= mul1_i_fu_218_p2[6];
mul1_i_reg_473[7] <= mul1_i_fu_218_p2[7];
mul1_i_reg_473[8] <= mul1_i_fu_218_p2[8];
mul1_i_reg_473[9] <= mul1_i_fu_218_p2[9];
mul1_i_reg_473[10] <= mul1_i_fu_218_p2[10];
mul1_i_reg_473[11] <= mul1_i_fu_218_p2[11];
mul1_i_reg_473[12] <= mul1_i_fu_218_p2[12];
mul1_i_reg_473[13] <= mul1_i_fu_218_p2[13];
mul1_i_reg_473[14] <= mul1_i_fu_218_p2[14];
mul1_i_reg_473[15] <= mul1_i_fu_218_p2[15];
mul1_i_reg_473[16] <= mul1_i_fu_218_p2[16];
mul1_i_reg_473[17] <= mul1_i_fu_218_p2[17];
mul1_i_reg_473[18] <= mul1_i_fu_218_p2[18];
mul1_i_reg_473[19] <= mul1_i_fu_218_p2[19];
mul1_i_reg_473[20] <= mul1_i_fu_218_p2[20];
mul1_i_reg_473[21] <= mul1_i_fu_218_p2[21];
mul1_i_reg_473[22] <= mul1_i_fu_218_p2[22];
mul1_i_reg_473[23] <= mul1_i_fu_218_p2[23];
mul1_i_reg_473[24] <= mul1_i_fu_218_p2[24];
mul1_i_reg_473[25] <= mul1_i_fu_218_p2[25];
mul1_i_reg_473[26] <= mul1_i_fu_218_p2[26];
mul1_i_reg_473[27] <= mul1_i_fu_218_p2[27];
mul1_i_reg_473[28] <= mul1_i_fu_218_p2[28];
mul1_i_reg_473[29] <= mul1_i_fu_218_p2[29];
mul1_i_reg_473[30] <= mul1_i_fu_218_p2[30];
mul1_i_reg_473[31] <= mul1_i_fu_218_p2[31];
mul1_i_reg_473[32] <= mul1_i_fu_218_p2[32];
mul1_i_reg_473[33] <= mul1_i_fu_218_p2[33];
mul1_i_reg_473[34] <= mul1_i_fu_218_p2[34];
mul1_i_reg_473[35] <= mul1_i_fu_218_p2[35];
mul1_i_reg_473[36] <= mul1_i_fu_218_p2[36];
mul1_i_reg_473[37] <= mul1_i_fu_218_p2[37];
mul1_i_reg_473[38] <= mul1_i_fu_218_p2[38];
mul1_i_reg_473[39] <= mul1_i_fu_218_p2[39];
mul1_i_reg_473[40] <= mul1_i_fu_218_p2[40];
mul1_i_reg_473[41] <= mul1_i_fu_218_p2[41];
mul1_i_reg_473[42] <= mul1_i_fu_218_p2[42];
mul1_i_reg_473[43] <= mul1_i_fu_218_p2[43];
mul1_i_reg_473[44] <= mul1_i_fu_218_p2[44];
mul1_i_reg_473[45] <= mul1_i_fu_218_p2[45];
mul1_i_reg_473[46] <= mul1_i_fu_218_p2[46];
mul1_i_reg_473[47] <= mul1_i_fu_218_p2[47];
mul1_i_reg_473[48] <= mul1_i_fu_218_p2[48];
mul1_i_reg_473[49] <= mul1_i_fu_218_p2[49];
mul1_i_reg_473[50] <= mul1_i_fu_218_p2[50];
mul1_i_reg_473[51] <= mul1_i_fu_218_p2[51];
mul1_i_reg_473[52] <= mul1_i_fu_218_p2[52];
mul1_i_reg_473[53] <= mul1_i_fu_218_p2[53];
mul1_i_reg_473[54] <= mul1_i_fu_218_p2[54];
mul1_i_reg_473[55] <= mul1_i_fu_218_p2[55];
mul1_i_reg_473[56] <= mul1_i_fu_218_p2[56];
mul1_i_reg_473[57] <= mul1_i_fu_218_p2[57];
        tmp_5_reg_478 <= tmp_i_fu_208_p2[ap_const_lv32_1B];
        tmp_7_reg_484 <= {{mul1_i_fu_218_p2[ap_const_lv32_39 : ap_const_lv32_24]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        mul_i_reg_505 <= mul_i_fu_376_p2;
        tmp_13_reg_510 <= tmp_4_i_fu_367_p2[ap_const_lv32_1F];
        tmp_15_reg_516 <= {{mul_i_fu_376_p2[ap_const_lv32_40 : ap_const_lv32_27]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_1_reg_458 <= accel_x[ap_const_lv32_1F];
        tmp_2_reg_463 <= {{mul3_i_fu_129_p2[ap_const_lv32_3F : ap_const_lv32_27]}};
        tmp_4_reg_468 <= tmp_4_fu_169_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_logic_0 == grp_top_calculateDir_fu_107_ap_done))) begin
        total_distance <= tmp_5_i_fu_446_p2;
    end
end

/// ap_done assign process. ///
always @ (grp_top_calculateDir_fu_107_ap_done or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_logic_0 == grp_top_calculateDir_fu_107_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_top_calculateDir_fu_107_ap_done or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_logic_0 == grp_top_calculateDir_fu_107_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_53)
begin
    if (ap_sig_bdd_53) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_66)
begin
    if (ap_sig_bdd_66) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_75)
begin
    if (ap_sig_bdd_75) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or grp_top_calculateDir_fu_107_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_logic_0 == grp_top_calculateDir_fu_107_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accel_cast_fu_196_p1 = $signed(accel_fu_189_p3);
assign accel_fu_189_p3 = ((tmp_1_reg_458)? neg_ti9_i_fu_183_p2: tmp_3_fu_177_p1);

/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_53 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_53 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_66 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_75 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_75 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign distance_cast_fu_438_p1 = $signed(distance_fu_431_p3);
assign distance_fu_431_p3 = ((tmp_13_reg_510)? neg_ti_i_fu_425_p2: trunc_i_cast_fu_421_p1);
assign grp_top_calculateDir_fu_107_ap_start = grp_top_calculateDir_fu_107_ap_start_ap_start_reg;
assign grp_top_calculateDir_fu_107_end_point = end_point;
assign grp_top_calculateDir_fu_107_start_point = start_point;
assign mul1_i_fu_218_p0 = tmp_i_fu_208_p2;
assign mul1_i_fu_218_p2 = ($signed(mul1_i_fu_218_p0) * $signed('h28F5C290));
assign mul3_i_fu_129_p0 = accel_x;
assign mul3_i_fu_129_p2 = ($signed(mul3_i_fu_129_p0) * $signed(64'h147AE147B));
assign mul_i_fu_376_p0 = tmp_4_i_fu_367_p2;
assign mul_i_fu_376_p2 = ($signed(mul_i_fu_376_p0) * $signed(65'h147AE147B));
assign neg_mul1_i_fu_246_p2 = ($signed(ap_const_lv58_0) - $signed(mul1_i_reg_473));
assign neg_mul4_i_cast_fu_135_p2 = ($signed(ap_const_lv64_0) - $signed(mul3_i_fu_129_p2));
assign neg_mul_i_fu_400_p2 = ($signed(ap_const_lv65_0) - $signed(mul_i_reg_505));
assign neg_ti1_i_fu_271_p2 = ($signed(ap_const_lv23_0) - $signed(trunc1_i_cast_fu_267_p1));
assign neg_ti9_i_fu_183_p2 = (ap_const_lv26_0 - tmp_4_cast_fu_180_p1);
assign neg_ti_i_fu_425_p2 = ($signed(ap_const_lv27_0) - $signed(trunc_i_cast_fu_421_p1));
assign next_dirc = grp_top_calculateDir_fu_107_next_dirc;
assign next_dirc_ap_vld = grp_top_calculateDir_fu_107_next_dirc_ap_vld;
assign p_lshr_f_i_fu_334_p4 = {{tmp_2_i_fu_294_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_lshr_i_fu_314_p4 = {{p_neg_i_fu_308_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_neg_i_fu_308_p2 = ($signed(ap_const_lv32_0) - $signed(tmp_2_i_fu_294_p2));
assign p_neg_t_i_fu_328_p2 = (ap_const_lv32_0 - tmp_8_fu_324_p1);
assign p_shl1_i_fu_200_p3 = {{accel_fu_189_p3}, {ap_const_lv2_0}};
assign tmp_10_fu_261_p3 = ((tmp_5_reg_478)? tmp_6_fu_251_p4: tmp_7_reg_484);
assign tmp_11_fu_300_p3 = tmp_2_i_fu_294_p2[ap_const_lv32_1F];
assign tmp_12_fu_362_p2 = tmp_3_i_reg_489 << ap_const_lv32_2;
assign tmp_14_fu_405_p4 = {{neg_mul_i_fu_400_p2[ap_const_lv32_40 : ap_const_lv32_27]}};
assign tmp_16_fu_415_p3 = ((tmp_13_reg_510)? tmp_14_fu_405_p4: tmp_15_reg_516);
assign tmp_1_fu_141_p3 = accel_x[ap_const_lv32_1F];
assign tmp_1_i_fu_284_p1 = $signed(tmp_6_i_fu_277_p3);
assign tmp_2_fu_159_p4 = {{mul3_i_fu_129_p2[ap_const_lv32_3F : ap_const_lv32_27]}};
assign tmp_2_i_fu_294_p2 = ($signed(velocity_fu_288_p2) + $signed(first_velocity));
assign tmp_3_fu_177_p1 = tmp_2_reg_463;
assign tmp_3_i_fu_348_p3 = ((tmp_11_fu_300_p3)? p_neg_t_i_fu_328_p2: tmp_9_fu_344_p1);
assign tmp_4_cast_fu_180_p1 = tmp_4_reg_468;
assign tmp_4_fu_169_p3 = ((tmp_1_fu_141_p3)? tmp_fu_149_p4: tmp_2_fu_159_p4);
assign tmp_4_i_fu_367_p2 = (tmp_12_fu_362_p2 + tmp_3_i_reg_489);
assign tmp_5_i_fu_446_p2 = ($signed(total_distance) + $signed(distance_cast_fu_438_p1));
assign tmp_6_fu_251_p4 = {{neg_mul1_i_fu_246_p2[ap_const_lv32_39 : ap_const_lv32_24]}};
assign tmp_6_i_fu_277_p3 = ((tmp_5_reg_478)? neg_ti1_i_fu_271_p2: trunc1_i_cast_fu_267_p1);
assign tmp_8_fu_324_p1 = p_lshr_i_fu_314_p4;
assign tmp_9_fu_344_p1 = p_lshr_f_i_fu_334_p4;
assign tmp_fu_149_p4 = {{neg_mul4_i_cast_fu_135_p2[ap_const_lv32_3F : ap_const_lv32_27]}};
assign tmp_i_fu_208_p2 = ($signed(p_shl1_i_fu_200_p3) + $signed(accel_cast_fu_196_p1));
assign trunc1_i_cast_fu_267_p1 = $signed(tmp_10_fu_261_p3);
assign trunc_i_cast_fu_421_p1 = $signed(tmp_16_fu_415_p3);
assign velocity_fu_288_p2 = ($signed(first_velocity) + $signed(tmp_1_i_fu_284_p1));
always @ (posedge ap_clk)
begin
    mul1_i_reg_473[3:0] <= 4'b0000;
end



endmodule //top

