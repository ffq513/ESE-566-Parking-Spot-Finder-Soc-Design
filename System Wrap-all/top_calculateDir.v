// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_calculateDir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        start_point,
        end_point,
        next_dirc,
        next_dirc_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_st2_fsm_1 = 10'b10;
parameter    ap_ST_st3_fsm_2 = 10'b100;
parameter    ap_ST_st4_fsm_3 = 10'b1000;
parameter    ap_ST_st5_fsm_4 = 10'b10000;
parameter    ap_ST_st6_fsm_5 = 10'b100000;
parameter    ap_ST_st7_fsm_6 = 10'b1000000;
parameter    ap_ST_st8_fsm_7 = 10'b10000000;
parameter    ap_ST_st9_fsm_8 = 10'b100000000;
parameter    ap_ST_st10_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_25 = 6'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_E = 4'b1110;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv4_D = 4'b1101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] start_point;
input  [31:0] end_point;
output  [31:0] next_dirc;
output   next_dirc_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] next_dirc;
reg next_dirc_ap_vld;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg   [31:0] last_point = 32'b101;
reg   [31:0] last_last_point = 32'b101;
wire   [10:0] dirMatrix_address0;
reg    dirMatrix_ce0;
wire   [3:0] dirMatrix_q0;
wire   [10:0] dirMatrix_address1;
reg    dirMatrix_ce1;
wire   [3:0] dirMatrix_q1;
wire   [5:0] indvarinc_fu_196_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_65;
wire   [5:0] indvarinc4_fu_213_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_74;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_82;
wire   [31:0] dist_q0;
reg   [31:0] total_distance_1_reg_508;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_91;
wire   [0:0] tmp_s_fu_234_p2;
reg   [0:0] tmp_s_reg_514;
reg  signed [31:0] last_point_load_reg_518;
wire   [31:0] sptSet_q0;
reg   [31:0] sptSet_load_reg_530;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_109;
wire   [0:0] tmp_4_fu_254_p2;
reg   [0:0] tmp_4_reg_541;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_120;
wire   [0:0] tmp_1_fu_259_p2;
reg   [0:0] tmp_1_reg_545;
reg   [5:0] sptSet_address0;
reg    sptSet_ce0;
reg    sptSet_we0;
reg   [31:0] sptSet_d0;
reg   [5:0] dist_address0;
reg    dist_ce0;
reg    dist_we0;
reg   [31:0] dist_d0;
wire    grp_top_dijkstra_fu_187_ap_start;
wire    grp_top_dijkstra_fu_187_ap_done;
wire    grp_top_dijkstra_fu_187_ap_idle;
wire    grp_top_dijkstra_fu_187_ap_ready;
wire   [31:0] grp_top_dijkstra_fu_187_vs;
wire   [5:0] grp_top_dijkstra_fu_187_prev_address0;
wire    grp_top_dijkstra_fu_187_prev_ce0;
wire    grp_top_dijkstra_fu_187_prev_we0;
wire   [31:0] grp_top_dijkstra_fu_187_prev_d0;
wire   [5:0] grp_top_dijkstra_fu_187_dist_address0;
wire    grp_top_dijkstra_fu_187_dist_ce0;
wire    grp_top_dijkstra_fu_187_dist_we0;
wire   [31:0] grp_top_dijkstra_fu_187_dist_d0;
wire   [31:0] grp_top_dijkstra_fu_187_dist_q0;
reg   [5:0] invdar_reg_164;
wire   [0:0] tmp_6_fu_207_p2;
reg   [5:0] invdar3_reg_175;
wire   [0:0] tmp_8_fu_224_p2;
reg    grp_top_dijkstra_fu_187_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_183;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_190;
wire   [63:0] tmp_fu_202_p1;
wire   [63:0] tmp_7_fu_219_p1;
wire  signed [63:0] tmp_9_fu_230_p1;
wire  signed [63:0] tmp_2_fu_244_p1;
wire  signed [63:0] tmp_3_fu_249_p1;
wire  signed [63:0] tmp_10_fu_279_p1;
wire  signed [63:0] tmp_11_fu_294_p1;
wire   [31:0] storemerge_cast_fu_472_p1;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_220;
wire  signed [31:0] tmp_2_fu_244_p0;
wire  signed [31:0] dirMatrix_addr4_fu_268_p0;
wire  signed [31:0] dirMatrix_addr4_fu_268_p2;
wire  signed [31:0] dirMatrix_addr5_fu_274_p2;
wire  signed [31:0] dirMatrix_addr1_fu_284_p2;
wire  signed [31:0] dirMatrix_addr2_fu_289_p2;
wire   [3:0] tmp_4_i_fu_315_p2;
wire   [0:0] tmp_5_i_fu_321_p2;
wire   [0:0] tmp_6_i_fu_327_p2;
wire   [0:0] or_cond5_i_fu_333_p2;
wire   [0:0] tmp_3_i_fu_309_p2;
wire   [0:0] sel_tmp6_fu_354_p2;
wire   [0:0] sel_tmp7_fu_360_p2;
wire   [0:0] sel_tmp8_fu_365_p2;
wire   [0:0] sel_tmp1_fu_377_p2;
wire   [0:0] sel_tmp2_fu_383_p2;
wire   [0:0] tmp6_fu_395_p2;
wire   [0:0] sel_tmp_fu_371_p2;
wire   [0:0] tmp7_fu_401_p2;
wire   [0:0] tmp5_fu_389_p2;
wire   [0:0] sel_tmp3_fu_407_p2;
wire   [2:0] p_i_fu_339_p3;
wire   [2:0] sel_tmp1_cast_cast_fu_347_p3;
wire   [0:0] sel_tmp5_fu_421_p2;
wire   [0:0] sel_tmp9_fu_427_p2;
wire   [0:0] sel_tmp10_fu_433_p2;
wire   [0:0] sel_tmp12_fu_445_p2;
wire   [0:0] sel_tmp11_fu_439_p2;
wire   [0:0] tmp_5_fu_458_p2;
wire   [2:0] sel_tmp13_cast_fu_450_p3;
wire   [2:0] sel_tmp4_fu_413_p3;
wire   [2:0] storemerge_fu_464_p3;
reg   [9:0] ap_NS_fsm;


top_calculateDir_dirMatrix #(
    .DataWidth( 4 ),
    .AddressRange( 1444 ),
    .AddressWidth( 11 ))
dirMatrix_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dirMatrix_address0 ),
    .ce0( dirMatrix_ce0 ),
    .q0( dirMatrix_q0 ),
    .address1( dirMatrix_address1 ),
    .ce1( dirMatrix_ce1 ),
    .q1( dirMatrix_q1 )
);

top_calculateDir_sptSet #(
    .DataWidth( 32 ),
    .AddressRange( 38 ),
    .AddressWidth( 6 ))
sptSet_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( sptSet_address0 ),
    .ce0( sptSet_ce0 ),
    .we0( sptSet_we0 ),
    .d0( sptSet_d0 ),
    .q0( sptSet_q0 )
);

top_calculateDir_sptSet #(
    .DataWidth( 32 ),
    .AddressRange( 38 ),
    .AddressWidth( 6 ))
dist_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( dist_address0 ),
    .ce0( dist_ce0 ),
    .we0( dist_we0 ),
    .d0( dist_d0 ),
    .q0( dist_q0 )
);

top_dijkstra grp_top_dijkstra_fu_187(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_top_dijkstra_fu_187_ap_start ),
    .ap_done( grp_top_dijkstra_fu_187_ap_done ),
    .ap_idle( grp_top_dijkstra_fu_187_ap_idle ),
    .ap_ready( grp_top_dijkstra_fu_187_ap_ready ),
    .vs( grp_top_dijkstra_fu_187_vs ),
    .prev_address0( grp_top_dijkstra_fu_187_prev_address0 ),
    .prev_ce0( grp_top_dijkstra_fu_187_prev_ce0 ),
    .prev_we0( grp_top_dijkstra_fu_187_prev_we0 ),
    .prev_d0( grp_top_dijkstra_fu_187_prev_d0 ),
    .dist_address0( grp_top_dijkstra_fu_187_dist_address0 ),
    .dist_ce0( grp_top_dijkstra_fu_187_dist_ce0 ),
    .dist_we0( grp_top_dijkstra_fu_187_dist_we0 ),
    .dist_d0( grp_top_dijkstra_fu_187_dist_d0 ),
    .dist_q0( grp_top_dijkstra_fu_187_dist_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_top_dijkstra_fu_187_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_top_dijkstra_fu_187_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_top_dijkstra_fu_187_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
            grp_top_dijkstra_fu_187_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_top_dijkstra_fu_187_ap_ready)) begin
            grp_top_dijkstra_fu_187_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_6_fu_207_p2))) begin
        invdar3_reg_175 <= ap_const_lv6_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_8_fu_224_p2))) begin
        invdar3_reg_175 <= indvarinc4_fu_213_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == tmp_6_fu_207_p2))) begin
        invdar_reg_164 <= indvarinc_fu_196_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        invdar_reg_164 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == tmp_4_fu_254_p2))) begin
        last_last_point <= last_point_load_reg_518;
        last_point <= sptSet_load_reg_530;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (tmp_s_fu_234_p2 == ap_const_lv1_0))) begin
        last_point_load_reg_518 <= last_point;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        sptSet_load_reg_530 <= sptSet_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == tmp_4_fu_254_p2))) begin
        tmp_1_reg_545 <= tmp_1_fu_259_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_4_reg_541 <= tmp_4_fu_254_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_s_reg_514 <= tmp_s_fu_234_p2;
        total_distance_1_reg_508 <= dist_q0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_220)
begin
    if (ap_sig_bdd_220) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_28)
begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_65)
begin
    if (ap_sig_bdd_65) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_74)
begin
    if (ap_sig_bdd_74) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_183)
begin
    if (ap_sig_bdd_183) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_190)
begin
    if (ap_sig_bdd_190) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_82)
begin
    if (ap_sig_bdd_82) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_91)
begin
    if (ap_sig_bdd_91) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_109)
begin
    if (ap_sig_bdd_109) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// dirMatrix_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        dirMatrix_ce0 = ap_const_logic_1;
    end else begin
        dirMatrix_ce0 = ap_const_logic_0;
    end
end

/// dirMatrix_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        dirMatrix_ce1 = ap_const_logic_1;
    end else begin
        dirMatrix_ce1 = ap_const_logic_0;
    end
end

/// dist_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or grp_top_dijkstra_fu_187_dist_address0 or ap_sig_cseq_ST_st5_fsm_4 or tmp_7_fu_219_p1 or tmp_9_fu_230_p1 or tmp_3_fu_249_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dist_address0 = tmp_7_fu_219_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        dist_address0 = tmp_3_fu_249_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        dist_address0 = tmp_9_fu_230_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        dist_address0 = grp_top_dijkstra_fu_187_dist_address0;
    end else begin
        dist_address0 = 'bx;
    end
end

/// dist_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or grp_top_dijkstra_fu_187_dist_ce0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        dist_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        dist_ce0 = grp_top_dijkstra_fu_187_dist_ce0;
    end else begin
        dist_ce0 = ap_const_logic_0;
    end
end

/// dist_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or grp_top_dijkstra_fu_187_dist_d0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dist_d0 = ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        dist_d0 = grp_top_dijkstra_fu_187_dist_d0;
    end else begin
        dist_d0 = 'bx;
    end
end

/// dist_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or grp_top_dijkstra_fu_187_dist_we0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dist_we0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        dist_we0 = grp_top_dijkstra_fu_187_dist_we0;
    end else begin
        dist_we0 = ap_const_logic_0;
    end
end

/// next_dirc assign process. ///
always @ (tmp_s_reg_514 or tmp_4_fu_254_p2 or tmp_4_reg_541 or ap_sig_cseq_ST_st9_fsm_8 or storemerge_cast_fu_472_p1 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (tmp_s_reg_514 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_4_reg_541))) begin
        next_dirc = storemerge_cast_fu_472_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == tmp_4_fu_254_p2))) begin
        next_dirc = ap_const_lv32_1;
    end else begin
        next_dirc = 'bx;
    end
end

/// next_dirc_ap_vld assign process. ///
always @ (tmp_s_reg_514 or tmp_4_fu_254_p2 or tmp_4_reg_541 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == tmp_4_fu_254_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (tmp_s_reg_514 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_4_reg_541)))) begin
        next_dirc_ap_vld = ap_const_logic_1;
    end else begin
        next_dirc_ap_vld = ap_const_logic_0;
    end
end

/// sptSet_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or grp_top_dijkstra_fu_187_prev_address0 or ap_sig_cseq_ST_st5_fsm_4 or tmp_fu_202_p1 or tmp_2_fu_244_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sptSet_address0 = tmp_fu_202_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        sptSet_address0 = tmp_2_fu_244_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sptSet_address0 = grp_top_dijkstra_fu_187_prev_address0;
    end else begin
        sptSet_address0 = 'bx;
    end
end

/// sptSet_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or grp_top_dijkstra_fu_187_prev_ce0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        sptSet_ce0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sptSet_ce0 = grp_top_dijkstra_fu_187_prev_ce0;
    end else begin
        sptSet_ce0 = ap_const_logic_0;
    end
end

/// sptSet_d0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or grp_top_dijkstra_fu_187_prev_d0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sptSet_d0 = ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sptSet_d0 = grp_top_dijkstra_fu_187_prev_d0;
    end else begin
        sptSet_d0 = 'bx;
    end
end

/// sptSet_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or grp_top_dijkstra_fu_187_prev_we0 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        sptSet_we0 = ap_const_logic_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sptSet_we0 = grp_top_dijkstra_fu_187_prev_we0;
    end else begin
        sptSet_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_s_fu_234_p2 or grp_top_dijkstra_fu_187_ap_done or tmp_6_fu_207_p2 or tmp_8_fu_224_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == tmp_6_fu_207_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == tmp_8_fu_224_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_logic_0 == grp_top_dijkstra_fu_187_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(tmp_s_fu_234_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_109 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_109 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_183 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_183 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_190 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_190 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_220 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_220 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_28 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_65 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_65 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_74 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_74 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_82 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_82 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_91 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_91 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end
assign dirMatrix_addr1_fu_284_p2 = ($signed(last_point_load_reg_518) * $signed('h26));
assign dirMatrix_addr2_fu_289_p2 = ($signed(dirMatrix_addr1_fu_284_p2) + $signed(sptSet_load_reg_530));
assign dirMatrix_addr4_fu_268_p0 = last_last_point;
assign dirMatrix_addr4_fu_268_p2 = ($signed(dirMatrix_addr4_fu_268_p0) * $signed('h26));
assign dirMatrix_addr5_fu_274_p2 = ($signed(dirMatrix_addr4_fu_268_p2) + $signed(last_point_load_reg_518));
assign dirMatrix_address0 = tmp_10_fu_279_p1;
assign dirMatrix_address1 = tmp_11_fu_294_p1;
assign grp_top_dijkstra_fu_187_ap_start = grp_top_dijkstra_fu_187_ap_start_ap_start_reg;
assign grp_top_dijkstra_fu_187_dist_q0 = dist_q0;
assign grp_top_dijkstra_fu_187_vs = end_point;
assign indvarinc4_fu_213_p2 = (invdar3_reg_175 + ap_const_lv6_1);
assign indvarinc_fu_196_p2 = (invdar_reg_164 + ap_const_lv6_1);
assign or_cond5_i_fu_333_p2 = (tmp_5_i_fu_321_p2 | tmp_6_i_fu_327_p2);
assign p_i_fu_339_p3 = ((or_cond5_i_fu_333_p2)? ap_const_lv3_4: ap_const_lv3_1);
assign sel_tmp10_fu_433_p2 = (sel_tmp5_fu_421_p2 | sel_tmp9_fu_427_p2);
assign sel_tmp11_fu_439_p2 = (sel_tmp10_fu_433_p2 & sel_tmp7_fu_360_p2);
assign sel_tmp12_fu_445_p2 = (tmp_1_reg_545 & tmp_3_i_fu_309_p2);
assign sel_tmp13_cast_fu_450_p3 = ((sel_tmp12_fu_445_p2)? ap_const_lv3_1: ap_const_lv3_2);
assign sel_tmp1_cast_cast_fu_347_p3 = ((tmp_1_reg_545)? ap_const_lv3_3: ap_const_lv3_1);
assign sel_tmp1_fu_377_p2 = (tmp_4_i_fu_315_p2 != ap_const_lv4_F? 1'b1: 1'b0);
assign sel_tmp2_fu_383_p2 = (tmp_4_i_fu_315_p2 != ap_const_lv4_3? 1'b1: 1'b0);
assign sel_tmp3_fu_407_p2 = (tmp7_fu_401_p2 & tmp5_fu_389_p2);
assign sel_tmp4_fu_413_p3 = ((sel_tmp3_fu_407_p2)? p_i_fu_339_p3: sel_tmp1_cast_cast_fu_347_p3);
assign sel_tmp5_fu_421_p2 = (tmp_4_i_fu_315_p2 == ap_const_lv4_D? 1'b1: 1'b0);
assign sel_tmp6_fu_354_p2 = (tmp_3_i_fu_309_p2 ^ ap_const_lv1_1);
assign sel_tmp7_fu_360_p2 = (tmp_1_reg_545 & sel_tmp6_fu_354_p2);
assign sel_tmp8_fu_365_p2 = (tmp_4_i_fu_315_p2 != ap_const_lv4_D? 1'b1: 1'b0);
assign sel_tmp9_fu_427_p2 = (tmp_4_i_fu_315_p2 == ap_const_lv4_1? 1'b1: 1'b0);
assign sel_tmp_fu_371_p2 = (tmp_4_i_fu_315_p2 != ap_const_lv4_1? 1'b1: 1'b0);
assign storemerge_cast_fu_472_p1 = storemerge_fu_464_p3;
assign storemerge_fu_464_p3 = ((tmp_5_fu_458_p2)? sel_tmp13_cast_fu_450_p3: sel_tmp4_fu_413_p3);
assign tmp5_fu_389_p2 = (sel_tmp7_fu_360_p2 & sel_tmp8_fu_365_p2);
assign tmp6_fu_395_p2 = (sel_tmp1_fu_377_p2 & sel_tmp2_fu_383_p2);
assign tmp7_fu_401_p2 = (tmp6_fu_395_p2 & sel_tmp_fu_371_p2);
assign tmp_10_fu_279_p1 = dirMatrix_addr5_fu_274_p2;
assign tmp_11_fu_294_p1 = dirMatrix_addr2_fu_289_p2;
assign tmp_1_fu_259_p2 = (total_distance_1_reg_508 == dist_q0? 1'b1: 1'b0);
assign tmp_2_fu_244_p0 = last_point;
assign tmp_2_fu_244_p1 = tmp_2_fu_244_p0;
assign tmp_3_fu_249_p1 = $signed(sptSet_q0);
assign tmp_3_i_fu_309_p2 = (dirMatrix_q0 == dirMatrix_q1? 1'b1: 1'b0);
assign tmp_4_fu_254_p2 = ($signed(total_distance_1_reg_508) < $signed(dist_q0)? 1'b1: 1'b0);
assign tmp_4_i_fu_315_p2 = (dirMatrix_q1 - dirMatrix_q0);
assign tmp_5_fu_458_p2 = (sel_tmp12_fu_445_p2 | sel_tmp11_fu_439_p2);
assign tmp_5_i_fu_321_p2 = (tmp_4_i_fu_315_p2 == ap_const_lv4_2? 1'b1: 1'b0);
assign tmp_6_fu_207_p2 = (invdar_reg_164 == ap_const_lv6_25? 1'b1: 1'b0);
assign tmp_6_i_fu_327_p2 = (tmp_4_i_fu_315_p2 == ap_const_lv4_E? 1'b1: 1'b0);
assign tmp_7_fu_219_p1 = invdar3_reg_175;
assign tmp_8_fu_224_p2 = (invdar3_reg_175 == ap_const_lv6_25? 1'b1: 1'b0);
assign tmp_9_fu_230_p1 = $signed(start_point);
assign tmp_fu_202_p1 = invdar_reg_164;
assign tmp_s_fu_234_p2 = (dist_q0 == ap_const_lv32_0? 1'b1: 1'b0);


endmodule //top_calculateDir

