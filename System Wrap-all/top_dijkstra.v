// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_dijkstra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        vs,
        prev_address0,
        prev_ce0,
        prev_we0,
        prev_d0,
        dist_address0,
        dist_ce0,
        dist_we0,
        dist_d0,
        dist_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_st8_fsm_7 = 9'b10000000;
parameter    ap_ST_st9_fsm_8 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_7FFFFFFF = 32'b1111111111111111111111111111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv6_26 = 6'b100110;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] vs;
output  [5:0] prev_address0;
output   prev_ce0;
output   prev_we0;
output  [31:0] prev_d0;
output  [5:0] dist_address0;
output   dist_ce0;
output   dist_we0;
output  [31:0] dist_d0;
input  [31:0] dist_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] prev_address0;
reg prev_ce0;
reg prev_we0;
reg[31:0] prev_d0;
reg[5:0] dist_address0;
reg dist_ce0;
reg dist_we0;
reg[31:0] dist_d0;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
reg   [10:0] matrix_address0;
reg    matrix_ce0;
wire   [2:0] matrix_q0;
wire  signed [63:0] tmp_fu_248_p1;
reg  signed [63:0] tmp_reg_451;
wire  signed [31:0] matrix_addr3_fu_252_p2;
reg  signed [31:0] matrix_addr3_reg_457;
wire   [5:0] i_2_fu_264_p2;
reg   [5:0] i_2_reg_465;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_69;
wire   [0:0] exitcond4_fu_258_p2;
wire   [31:0] k_cast2_fu_306_p1;
reg   [31:0] k_cast2_reg_484;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_84;
wire   [5:0] j_fu_316_p2;
reg   [5:0] j_reg_492;
wire   [0:0] exitcond2_fu_310_p2;
wire  signed [31:0] matrix_addr1_fu_333_p2;
reg  signed [31:0] matrix_addr1_reg_507;
wire   [31:0] min_1_fu_368_p3;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_106;
wire   [5:0] j_2_fu_387_p2;
reg   [5:0] j_2_reg_520;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_115;
wire   [63:0] tmp_1_fu_393_p1;
reg   [63:0] tmp_1_reg_525;
wire   [0:0] exitcond_fu_381_p2;
wire   [5:0] i_3_fu_412_p2;
wire   [31:0] tmp_2_fu_438_p3;
reg   [31:0] tmp_2_reg_546;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_137;
wire   [0:0] flag_q0;
reg   [0:0] flag_load_1_reg_552;
reg   [5:0] dist_addr_5_reg_556;
reg   [5:0] flag_address0;
reg    flag_ce0;
reg    flag_we0;
reg   [0:0] flag_d0;
reg   [5:0] i_reg_185;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_162;
reg   [5:0] i_1_reg_197;
reg   [5:0] k_reg_209;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_176;
wire   [0:0] exitcond3_fu_300_p2;
reg   [31:0] min_reg_220;
reg   [5:0] j_1_reg_232;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_191;
wire  signed [63:0] tmp_12_fu_279_p1;
wire   [63:0] tmp_s_fu_284_p1;
wire   [63:0] tmp_8_fu_322_p1;
wire  signed [63:0] tmp_7_fu_328_p1;
wire  signed [63:0] tmp_13_fu_407_p1;
wire   [0:0] tmp_9_fu_446_p2;
reg   [31:0] k_s_fu_56;
wire   [31:0] k_2_fu_360_p3;
wire   [31:0] matrix_load_cast_fu_295_p1;
wire  signed [31:0] tmp_fu_248_p0;
wire  signed [31:0] matrix_addr3_fu_252_p0;
wire   [31:0] tmp_trn_fu_270_p1;
wire  signed [31:0] matrix_addr4_fu_274_p2;
wire  signed [30:0] matrix_load_cast1_fu_291_p1;
wire  signed [31:0] tmp_7_fu_328_p0;
wire  signed [31:0] matrix_addr1_fu_333_p0;
wire   [0:0] tmp_5_fu_339_p2;
wire   [31:0] k_k_1_fu_345_p3;
wire   [31:0] min_2_min_fu_352_p3;
wire   [31:0] tmp_1_trn_fu_398_p1;
wire  signed [31:0] matrix_addr2_fu_402_p2;
wire  signed [30:0] matrix_load_1_cast1_fu_418_p1;
wire   [31:0] matrix_load_1_cast_fu_422_p1;
wire   [0:0] tmp_4_fu_426_p2;
wire   [31:0] tmp_6_fu_432_p2;
reg   [8:0] ap_NS_fsm;


top_dijkstra_matrix #(
    .DataWidth( 3 ),
    .AddressRange( 1444 ),
    .AddressWidth( 11 ))
matrix_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( matrix_address0 ),
    .ce0( matrix_ce0 ),
    .q0( matrix_q0 )
);

top_dijkstra_flag #(
    .DataWidth( 1 ),
    .AddressRange( 38 ),
    .AddressWidth( 6 ))
flag_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( flag_address0 ),
    .ce0( flag_ce0 ),
    .we0( flag_we0 ),
    .d0( flag_d0 ),
    .q0( flag_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond_fu_381_p2))) begin
        i_1_reg_197 <= i_3_fu_412_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_258_p2 == ap_const_lv1_0))) begin
        i_1_reg_197 <= ap_const_lv6_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_185 <= i_2_reg_465;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_185 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        j_1_reg_232 <= j_2_reg_520;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2))) begin
        j_1_reg_232 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_reg_209 <= j_reg_492;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_300_p2))) begin
        k_reg_209 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        min_reg_220 <= min_1_fu_368_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond3_fu_300_p2))) begin
        min_reg_220 <= ap_const_lv32_7FFFFFFF;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) & (ap_const_lv1_0 == flag_q0))) begin
        dist_addr_5_reg_556 <= tmp_1_reg_525;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        flag_load_1_reg_552 <= flag_q0;
        tmp_2_reg_546 <= tmp_2_fu_438_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_2_reg_465 <= i_2_fu_264_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        j_2_reg_520 <= j_2_fu_387_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_reg_492 <= j_fu_316_p2;
        k_cast2_reg_484[0] <= k_cast2_fu_306_p1[0];
k_cast2_reg_484[1] <= k_cast2_fu_306_p1[1];
k_cast2_reg_484[2] <= k_cast2_fu_306_p1[2];
k_cast2_reg_484[3] <= k_cast2_fu_306_p1[3];
k_cast2_reg_484[4] <= k_cast2_fu_306_p1[4];
k_cast2_reg_484[5] <= k_cast2_fu_306_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        k_s_fu_56 <= k_2_fu_360_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2))) begin
        matrix_addr1_reg_507[1] <= matrix_addr1_fu_333_p2[1];
matrix_addr1_reg_507[2] <= matrix_addr1_fu_333_p2[2];
matrix_addr1_reg_507[3] <= matrix_addr1_fu_333_p2[3];
matrix_addr1_reg_507[4] <= matrix_addr1_fu_333_p2[4];
matrix_addr1_reg_507[5] <= matrix_addr1_fu_333_p2[5];
matrix_addr1_reg_507[6] <= matrix_addr1_fu_333_p2[6];
matrix_addr1_reg_507[7] <= matrix_addr1_fu_333_p2[7];
matrix_addr1_reg_507[8] <= matrix_addr1_fu_333_p2[8];
matrix_addr1_reg_507[9] <= matrix_addr1_fu_333_p2[9];
matrix_addr1_reg_507[10] <= matrix_addr1_fu_333_p2[10];
matrix_addr1_reg_507[11] <= matrix_addr1_fu_333_p2[11];
matrix_addr1_reg_507[12] <= matrix_addr1_fu_333_p2[12];
matrix_addr1_reg_507[13] <= matrix_addr1_fu_333_p2[13];
matrix_addr1_reg_507[14] <= matrix_addr1_fu_333_p2[14];
matrix_addr1_reg_507[15] <= matrix_addr1_fu_333_p2[15];
matrix_addr1_reg_507[16] <= matrix_addr1_fu_333_p2[16];
matrix_addr1_reg_507[17] <= matrix_addr1_fu_333_p2[17];
matrix_addr1_reg_507[18] <= matrix_addr1_fu_333_p2[18];
matrix_addr1_reg_507[19] <= matrix_addr1_fu_333_p2[19];
matrix_addr1_reg_507[20] <= matrix_addr1_fu_333_p2[20];
matrix_addr1_reg_507[21] <= matrix_addr1_fu_333_p2[21];
matrix_addr1_reg_507[22] <= matrix_addr1_fu_333_p2[22];
matrix_addr1_reg_507[23] <= matrix_addr1_fu_333_p2[23];
matrix_addr1_reg_507[24] <= matrix_addr1_fu_333_p2[24];
matrix_addr1_reg_507[25] <= matrix_addr1_fu_333_p2[25];
matrix_addr1_reg_507[26] <= matrix_addr1_fu_333_p2[26];
matrix_addr1_reg_507[27] <= matrix_addr1_fu_333_p2[27];
matrix_addr1_reg_507[28] <= matrix_addr1_fu_333_p2[28];
matrix_addr1_reg_507[29] <= matrix_addr1_fu_333_p2[29];
matrix_addr1_reg_507[30] <= matrix_addr1_fu_333_p2[30];
matrix_addr1_reg_507[31] <= matrix_addr1_fu_333_p2[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        matrix_addr3_reg_457[1] <= matrix_addr3_fu_252_p2[1];
matrix_addr3_reg_457[2] <= matrix_addr3_fu_252_p2[2];
matrix_addr3_reg_457[3] <= matrix_addr3_fu_252_p2[3];
matrix_addr3_reg_457[4] <= matrix_addr3_fu_252_p2[4];
matrix_addr3_reg_457[5] <= matrix_addr3_fu_252_p2[5];
matrix_addr3_reg_457[6] <= matrix_addr3_fu_252_p2[6];
matrix_addr3_reg_457[7] <= matrix_addr3_fu_252_p2[7];
matrix_addr3_reg_457[8] <= matrix_addr3_fu_252_p2[8];
matrix_addr3_reg_457[9] <= matrix_addr3_fu_252_p2[9];
matrix_addr3_reg_457[10] <= matrix_addr3_fu_252_p2[10];
matrix_addr3_reg_457[11] <= matrix_addr3_fu_252_p2[11];
matrix_addr3_reg_457[12] <= matrix_addr3_fu_252_p2[12];
matrix_addr3_reg_457[13] <= matrix_addr3_fu_252_p2[13];
matrix_addr3_reg_457[14] <= matrix_addr3_fu_252_p2[14];
matrix_addr3_reg_457[15] <= matrix_addr3_fu_252_p2[15];
matrix_addr3_reg_457[16] <= matrix_addr3_fu_252_p2[16];
matrix_addr3_reg_457[17] <= matrix_addr3_fu_252_p2[17];
matrix_addr3_reg_457[18] <= matrix_addr3_fu_252_p2[18];
matrix_addr3_reg_457[19] <= matrix_addr3_fu_252_p2[19];
matrix_addr3_reg_457[20] <= matrix_addr3_fu_252_p2[20];
matrix_addr3_reg_457[21] <= matrix_addr3_fu_252_p2[21];
matrix_addr3_reg_457[22] <= matrix_addr3_fu_252_p2[22];
matrix_addr3_reg_457[23] <= matrix_addr3_fu_252_p2[23];
matrix_addr3_reg_457[24] <= matrix_addr3_fu_252_p2[24];
matrix_addr3_reg_457[25] <= matrix_addr3_fu_252_p2[25];
matrix_addr3_reg_457[26] <= matrix_addr3_fu_252_p2[26];
matrix_addr3_reg_457[27] <= matrix_addr3_fu_252_p2[27];
matrix_addr3_reg_457[28] <= matrix_addr3_fu_252_p2[28];
matrix_addr3_reg_457[29] <= matrix_addr3_fu_252_p2[29];
matrix_addr3_reg_457[30] <= matrix_addr3_fu_252_p2[30];
matrix_addr3_reg_457[31] <= matrix_addr3_fu_252_p2[31];
        tmp_reg_451 <= tmp_fu_248_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond_fu_381_p2))) begin
        tmp_1_reg_525[0] <= tmp_1_fu_393_p1[0];
tmp_1_reg_525[1] <= tmp_1_fu_393_p1[1];
tmp_1_reg_525[2] <= tmp_1_fu_393_p1[2];
tmp_1_reg_525[3] <= tmp_1_fu_393_p1[3];
tmp_1_reg_525[4] <= tmp_1_fu_393_p1[4];
tmp_1_reg_525[5] <= tmp_1_fu_393_p1[5];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_300_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_300_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond3_fu_300_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond3_fu_300_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_27)
begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_176)
begin
    if (ap_sig_bdd_176) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_84)
begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_106)
begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_191)
begin
    if (ap_sig_bdd_191) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// dist_address0 assign process. ///
always @ (tmp_reg_451 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or tmp_1_reg_525 or ap_sig_cseq_ST_st8_fsm_7 or dist_addr_5_reg_556 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or tmp_s_fu_284_p1 or tmp_8_fu_322_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        dist_address0 = dist_addr_5_reg_556;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dist_address0 = tmp_s_fu_284_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        dist_address0 = tmp_reg_451;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        dist_address0 = tmp_1_reg_525;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        dist_address0 = tmp_8_fu_322_p1;
    end else begin
        dist_address0 = 'bx;
    end
end

/// dist_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        dist_ce0 = ap_const_logic_1;
    end else begin
        dist_ce0 = ap_const_logic_0;
    end
end

/// dist_d0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_2_reg_546 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or matrix_load_cast_fu_295_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        dist_d0 = tmp_2_reg_546;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        dist_d0 = matrix_load_cast_fu_295_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        dist_d0 = ap_const_lv32_0;
    end else begin
        dist_d0 = 'bx;
    end
end

/// dist_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_258_p2 or flag_load_1_reg_552 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or tmp_9_fu_446_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_258_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == flag_load_1_reg_552) & ~(ap_const_lv1_0 == tmp_9_fu_446_p2)))) begin
        dist_we0 = ap_const_logic_1;
    end else begin
        dist_we0 = ap_const_logic_0;
    end
end

/// flag_address0 assign process. ///
always @ (tmp_reg_451 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or exitcond2_fu_310_p2 or ap_sig_cseq_ST_st7_fsm_6 or tmp_1_fu_393_p1 or ap_sig_cseq_ST_st3_fsm_2 or tmp_s_fu_284_p1 or tmp_8_fu_322_p1 or tmp_7_fu_328_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2))) begin
        flag_address0 = tmp_7_fu_328_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        flag_address0 = tmp_s_fu_284_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        flag_address0 = tmp_reg_451;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        flag_address0 = tmp_1_fu_393_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_310_p2))) begin
        flag_address0 = tmp_8_fu_322_p1;
    end else begin
        flag_address0 = 'bx;
    end
end

/// flag_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or exitcond2_fu_310_p2 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == exitcond2_fu_310_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        flag_ce0 = ap_const_logic_1;
    end else begin
        flag_ce0 = ap_const_logic_0;
    end
end

/// flag_d0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st5_fsm_4 or exitcond2_fu_310_p2 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        flag_d0 = ap_const_lv1_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2)))) begin
        flag_d0 = ap_const_lv1_1;
    end else begin
        flag_d0 = 'bx;
    end
end

/// flag_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond4_fu_258_p2 or ap_sig_cseq_ST_st5_fsm_4 or exitcond2_fu_310_p2 or ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == exitcond2_fu_310_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_258_p2 == ap_const_lv1_0)))) begin
        flag_we0 = ap_const_logic_1;
    end else begin
        flag_we0 = ap_const_logic_0;
    end
end

/// matrix_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6 or tmp_12_fu_279_p1 or tmp_13_fu_407_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        matrix_address0 = tmp_13_fu_407_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        matrix_address0 = tmp_12_fu_279_p1;
    end else begin
        matrix_address0 = 'bx;
    end
end

/// matrix_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        matrix_ce0 = ap_const_logic_1;
    end else begin
        matrix_ce0 = ap_const_logic_0;
    end
end

/// prev_address0 assign process. ///
always @ (tmp_1_reg_525 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or tmp_s_fu_284_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        prev_address0 = tmp_1_reg_525;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        prev_address0 = tmp_s_fu_284_p1;
    end else begin
        prev_address0 = 'bx;
    end
end

/// prev_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        prev_ce0 = ap_const_logic_1;
    end else begin
        prev_ce0 = ap_const_logic_0;
    end
end

/// prev_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or k_s_fu_56)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        prev_d0 = k_s_fu_56;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        prev_d0 = ap_const_lv32_0;
    end else begin
        prev_d0 = 'bx;
    end
end

/// prev_we0 assign process. ///
always @ (flag_load_1_reg_552 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st9_fsm_8 or tmp_9_fu_446_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == flag_load_1_reg_552) & ~(ap_const_lv1_0 == tmp_9_fu_446_p2)))) begin
        prev_we0 = ap_const_logic_1;
    end else begin
        prev_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond4_fu_258_p2 or exitcond2_fu_310_p2 or exitcond_fu_381_p2 or exitcond3_fu_300_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond4_fu_258_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_300_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_310_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_381_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_106 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_176 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_176 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_191 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_191 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_27 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_84 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end
assign exitcond2_fu_310_p2 = (k_reg_209 == ap_const_lv6_26? 1'b1: 1'b0);
assign exitcond3_fu_300_p2 = (i_1_reg_197 == ap_const_lv6_26? 1'b1: 1'b0);
assign exitcond4_fu_258_p2 = (i_reg_185 == ap_const_lv6_26? 1'b1: 1'b0);
assign exitcond_fu_381_p2 = (j_1_reg_232 == ap_const_lv6_26? 1'b1: 1'b0);
assign i_2_fu_264_p2 = (i_reg_185 + ap_const_lv6_1);
assign i_3_fu_412_p2 = (i_1_reg_197 + ap_const_lv6_1);
assign j_2_fu_387_p2 = (j_1_reg_232 + ap_const_lv6_1);
assign j_fu_316_p2 = (k_reg_209 + ap_const_lv6_1);
assign k_2_fu_360_p3 = ((flag_q0)? k_s_fu_56: k_k_1_fu_345_p3);
assign k_cast2_fu_306_p1 = k_reg_209;
assign k_k_1_fu_345_p3 = ((tmp_5_fu_339_p2)? k_cast2_reg_484: k_s_fu_56);
assign matrix_addr1_fu_333_p0 = k_s_fu_56;
assign matrix_addr1_fu_333_p2 = ($signed(matrix_addr1_fu_333_p0) * $signed('h26));
assign matrix_addr2_fu_402_p2 = ($signed(matrix_addr1_reg_507) + $signed(tmp_1_trn_fu_398_p1));
assign matrix_addr3_fu_252_p0 = vs;
assign matrix_addr3_fu_252_p2 = ($signed(matrix_addr3_fu_252_p0) * $signed('h26));
assign matrix_addr4_fu_274_p2 = ($signed(matrix_addr3_reg_457) + $signed(tmp_trn_fu_270_p1));
assign matrix_load_1_cast1_fu_418_p1 = $signed(matrix_q0);
assign matrix_load_1_cast_fu_422_p1 = $unsigned(matrix_load_1_cast1_fu_418_p1);
assign matrix_load_cast1_fu_291_p1 = $signed(matrix_q0);
assign matrix_load_cast_fu_295_p1 = $unsigned(matrix_load_cast1_fu_291_p1);
assign min_1_fu_368_p3 = ((flag_q0)? min_reg_220: min_2_min_fu_352_p3);
assign min_2_min_fu_352_p3 = ((tmp_5_fu_339_p2)? dist_q0: min_reg_220);
assign tmp_12_fu_279_p1 = matrix_addr4_fu_274_p2;
assign tmp_13_fu_407_p1 = matrix_addr2_fu_402_p2;
assign tmp_1_fu_393_p1 = j_1_reg_232;
assign tmp_1_trn_fu_398_p1 = j_1_reg_232;
assign tmp_2_fu_438_p3 = ((tmp_4_fu_426_p2)? ap_const_lv32_7FFFFFFF: tmp_6_fu_432_p2);
assign tmp_4_fu_426_p2 = (matrix_q0 == ap_const_lv3_7? 1'b1: 1'b0);
assign tmp_5_fu_339_p2 = ($signed(dist_q0) < $signed(min_reg_220)? 1'b1: 1'b0);
assign tmp_6_fu_432_p2 = (matrix_load_1_cast_fu_422_p1 + min_reg_220);
assign tmp_7_fu_328_p0 = k_s_fu_56;
assign tmp_7_fu_328_p1 = tmp_7_fu_328_p0;
assign tmp_8_fu_322_p1 = k_reg_209;
assign tmp_9_fu_446_p2 = ($signed(tmp_2_reg_546) < $signed(dist_q0)? 1'b1: 1'b0);
assign tmp_fu_248_p0 = vs;
assign tmp_fu_248_p1 = tmp_fu_248_p0;
assign tmp_s_fu_284_p1 = i_reg_185;
assign tmp_trn_fu_270_p1 = i_reg_185;
always @ (posedge ap_clk)
begin
    matrix_addr3_reg_457[0] <= 1'b0;
    k_cast2_reg_484[31:6] <= 26'b00000000000000000000000000;
    matrix_addr1_reg_507[0] <= 1'b0;
    tmp_1_reg_525[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end



endmodule //top_dijkstra

